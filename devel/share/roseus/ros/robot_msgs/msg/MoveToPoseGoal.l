;; Auto-generated. Do not edit!


(when (boundp 'robot_msgs::MoveToPoseGoal)
  (if (not (find-package "ROBOT_MSGS"))
    (make-package "ROBOT_MSGS"))
  (shadow 'MoveToPoseGoal (find-package "ROBOT_MSGS")))
(unless (find-package "ROBOT_MSGS::MOVETOPOSEGOAL")
  (make-package "ROBOT_MSGS::MOVETOPOSEGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveToPoseGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass robot_msgs::MoveToPoseGoal
  :super ros::object
  :slots (_target_pose ))

(defmethod robot_msgs::MoveToPoseGoal
  (:init
   (&key
    ((:target_pose __target_pose) (instance geometry_msgs::Pose2D :init))
    )
   (send-super :init)
   (setq _target_pose __target_pose)
   self)
  (:target_pose
   (&rest __target_pose)
   (if (keywordp (car __target_pose))
       (send* _target_pose __target_pose)
     (progn
       (if __target_pose (setq _target_pose (car __target_pose)))
       _target_pose)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose2D _target_pose
    (send _target_pose :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose2D _target_pose
       (send _target_pose :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose2D _target_pose
     (send _target_pose :deserialize buf ptr-) (incf ptr- (send _target_pose :serialization-length))
   ;;
   self)
  )

(setf (get robot_msgs::MoveToPoseGoal :md5sum-) "80b130a384062a7ab02c42399d5fceca")
(setf (get robot_msgs::MoveToPoseGoal :datatype-) "robot_msgs/MoveToPoseGoal")
(setf (get robot_msgs::MoveToPoseGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
geometry_msgs/Pose2D target_pose

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

")



(provide :robot_msgs/MoveToPoseGoal "80b130a384062a7ab02c42399d5fceca")


